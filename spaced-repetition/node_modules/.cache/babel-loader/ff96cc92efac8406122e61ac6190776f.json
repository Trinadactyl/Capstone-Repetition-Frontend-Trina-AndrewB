{"ast":null,"code":"import config from '../config';\nimport TokenService from './token-service';\nvar AuthApiService = {\n  postUser: function postUser(user) {\n    return fetch(\"\".concat(config.API_ENDPOINT, \"/user\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    }).then(function (res) {\n      return !res.ok ? res.json().then(function (e) {\n        return Promise.reject(e);\n      }) : res.json();\n    });\n  },\n  postLogin: function postLogin(_ref) {\n    var username = _ref.username,\n        password = _ref.password;\n    return fetch(\"\".concat(config.API_ENDPOINT, \"/auth/token\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(function (res) {\n      return !res.ok ? res.json().then(function (err) {\n        return Promise.reject(err);\n      }) : res.json();\n    });\n  },\n  refreshToken: function refreshToken() {\n    return fetch(\"\".concat(config.API_ENDPOINT, \"/auth/token\"), {\n      method: 'PUT',\n      headers: {\n        'authorization': \"Bearer \".concat(TokenService.getAuthToken())\n      }\n    }).then(function (res) {\n      return !res.ok ? res.json().then(function (e) {\n        return Promise.reject(e);\n      }) : res.json();\n    });\n  }\n};\nexport default AuthApiService;","map":{"version":3,"sources":["/Users/andrewburchett/thinkful/capstone-repetition-frontend/spaced-repetition/src/services/auth-api-service.js"],"names":["config","TokenService","AuthApiService","postUser","user","fetch","API_ENDPOINT","method","headers","body","JSON","stringify","then","res","ok","json","e","Promise","reject","postLogin","username","password","err","refreshToken","getAuthToken"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,QADqB,oBACZC,IADY,EACN;AACb,WAAOC,KAAK,WAAIL,MAAM,CAACM,YAAX,YAAgC;AAC1CC,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFiC;AAK1CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AALoC,KAAhC,CAAL,CAOJQ,IAPI,CAOC,UAAAC,GAAG;AAAA,aACN,CAACA,GAAG,CAACC,EAAN,GACID,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgB,UAAAI,CAAC;AAAA,eAAIC,OAAO,CAACC,MAAR,CAAeF,CAAf,CAAJ;AAAA,OAAjB,CADJ,GAEIH,GAAG,CAACE,IAAJ,EAHG;AAAA,KAPJ,CAAP;AAYD,GAdoB;AAerBI,EAAAA,SAfqB,2BAea;AAAA,QAAtBC,QAAsB,QAAtBA,QAAsB;AAAA,QAAZC,QAAY,QAAZA,QAAY;AAChC,WAAOhB,KAAK,WAAIL,MAAM,CAACM,YAAX,kBAAsC;AAChDC,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFuC;AAKhDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAES,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,QAAQ,EAARA;AAAZ,OAAf;AAL0C,KAAtC,CAAL,CAOJT,IAPI,CAOC,UAAAC,GAAG;AAAA,aACN,CAACA,GAAG,CAACC,EAAN,GACID,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgB,UAAAU,GAAG;AAAA,eAAIL,OAAO,CAACC,MAAR,CAAeI,GAAf,CAAJ;AAAA,OAAnB,CADJ,GAEIT,GAAG,CAACE,IAAJ,EAHG;AAAA,KAPJ,CAAP;AAYD,GA5BoB;AA6BrBQ,EAAAA,YA7BqB,0BA6BN;AACb,WAAOlB,KAAK,WAAIL,MAAM,CAACM,YAAX,kBAAsC;AAChDC,MAAAA,MAAM,EAAE,KADwC;AAEhDC,MAAAA,OAAO,EAAE;AACP,0CAA2BP,YAAY,CAACuB,YAAb,EAA3B;AADO;AAFuC,KAAtC,CAAL,CAMJZ,IANI,CAMC,UAAAC,GAAG;AAAA,aACN,CAACA,GAAG,CAACC,EAAN,GACID,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgB,UAAAI,CAAC;AAAA,eAAIC,OAAO,CAACC,MAAR,CAAeF,CAAf,CAAJ;AAAA,OAAjB,CADJ,GAEIH,GAAG,CAACE,IAAJ,EAHG;AAAA,KANJ,CAAP;AAWD;AAzCoB,CAAvB;AA4CA,eAAeb,cAAf","sourcesContent":["import config from '../config'\nimport TokenService from './token-service'\n\nconst AuthApiService = {\n  postUser(user) {\n    return fetch(`${config.API_ENDPOINT}/user`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    })\n      .then(res =>\n        (!res.ok)\n          ? res.json().then(e => Promise.reject(e))\n          : res.json()\n      )\n  },\n  postLogin({ username, password }) {\n    return fetch(`${config.API_ENDPOINT}/auth/token`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then(res =>\n        (!res.ok)\n          ? res.json().then(err => Promise.reject(err))\n          : res.json()\n      )\n  },\n  refreshToken() {\n    return fetch(`${config.API_ENDPOINT}/auth/token`, {\n      method: 'PUT',\n      headers: {\n        'authorization': `Bearer ${TokenService.getAuthToken()}`,\n      },\n    })\n      .then(res =>\n        (!res.ok)\n          ? res.json().then(e => Promise.reject(e))\n          : res.json()\n      )\n  },\n}\n\nexport default AuthApiService\n"]},"metadata":{},"sourceType":"module"}